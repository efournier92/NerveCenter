(function() {

  angular.module('nerveCenter',
    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',
     'gridster']);

  function config($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl',
      })
      .otherwise({redirectTo: '/'});

    // HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, auth) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !auth.isLoggedIn()) {
        $location.path('/');
      }
    });
  }

  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('authCtrl', authCtrl);

  authCtrl.$inject = ['$location', 'auth', 'meanData'];
  function authCtrl($location, auth, meanData) {
    var $auth = this;

    $auth.credentials = {
      email : "",
      password : ""
    };

    $auth.onReg = function() {
      auth
        .register($auth.credentials)
        .error(function(err){
          alert(err);
        })
        .then(function(){
          $location.path('../dashboard/dashboard.view');
        });
    };
    
    $auth.user = {};

    $auth.onLogin = function() {
      auth
        .login($auth.credentials)
        .error(function(err){
          alert(err);
        })
        .then(function(){
          $location.path('../dashboard/dashboard.view');
        });
    }
  }

})();

(function() {

  angular
    .module('nerveCenter')
    .service('auth', auth);

  auth.$inject = ['$http', '$window'];
  function auth($http, $window) {

    var saveToken = function(token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function() {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function() {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function() {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function() {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();


(function() { 

  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location, 
    $uibModal, $log, $document, $filter, $window, meanData, auth) {

    $scope.draggable = false;
    $scope.deleteEnabled = false;
    $scope.urlsEnabled = true;


    angular.element($window).bind('resize', function() {
      if (($scope.screenSize == 'lg' && $window.innerWidth < 1000)
        || ($scope.screenSize = 'md' && $window.innerWidth > 1000)
        || ($scope.screenSize = 'md' && $window.innerWidth < 500)
        || ($scope.screenSize = 'sm' && $window.innerWidth > 500)) {
        location.reload();
      }
    });

    updateWidgets();

    function instantiateGridster() {
      var width = this.window.innerWidth;
      var adjustedGridOptions = gridOptions;
      if (width > 1000) {
        adjustedGridOptions.columns = 7; 
      } else if (width > 500) {
        adjustedGridOptions.columns = 6; 
      } else {
        adjustedGridOptions.columns = 2; 
      }
      return adjustedGridOptions;
    }

    function checkScreenSize() {
      var start = $window.innerWidth;
      if (start > 1000) {
        $scope.screenSize = 'lg';
      } else if (start > 500) {
        $scope.screenSize = 'md';
      } else {
        $scope.screenSize = 'sm';
      }
      console.log($scope.screenSize);
    }

    function updateWidgets() {
      checkScreenSize();
      meanData.getProfile()
        .success(function(data) {
          this.widgets = data.widgets;
        })
        .error(function() {
          $scope.openAuthModal();
        })
        .finally(function() {
          $scope.widgets = angular.fromJson(this.widgets);
          $scope.gridOptions = instantiateGridster();
        });
    }

    $scope.saveWidgets = function() {
      data = $scope.widgets;
      meanData.updateWidgets(data)
        .success(function(data) {
          console.log("Success!: ", data)
        })
        .error(function(e) {
          console.log(e);
        });
    }

    $scope.createWidget = function() {
      var widgetUrl = $scope.widgetUrl;
      var widgetWeight = $scope.widgetWeight;
      var widgetIcon = $scope.selectedIcon;

      var defaultIcon = "img/_blank.png";
      // Handle null values 
      if (!widgetUrl && widgetIcon === defaultIcon) {
        window.alert("Please Enter URL and Select an Icon");
        return;
      } else if (!widgetUrl) {
        window.alert("Please Enter URL");
        return;
      } else if (widgetIcon === defaultIcon) {
        window.alert("Please Select an Icon");
        return;
      }

      var newWidget = {
        icon: widgetIcon,
        url: widgetUrl 
      }

      $scope.widgets.push(newWidget);
      $scope.saveWidgets();
      $location.path('dashboard.view');
    }

    $scope.importWidgets = function() {
      $scope.widgets = angular.fromJson($scope.widgetString);
      $scope.saveWidgets();
      location.reload();
    } 

    $scope.deleteWidget = function(widget) {
      $scope.widgets = $scope.widgets.filter(function(element){
        return element.url != widget.url;
      });

      $scope.saveWidgets();
    }

    $scope.onLogout = function() {
      auth.logout();
      location.reload();
    }

    $scope.toggleDraggable = function() {
      gridOptions.draggable.enabled = !gridOptions.draggable.enabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;
      if ($scope.deleteEnabled)
        $scope.deleteEnabled = false;
    }

    $scope.toggleDelete = function() {
      $scope.deleteEnabled = !$scope.deleteEnabled;
      $scope.urlsEnabled = !$scope.urlsEnabled;
      if (gridOptions.draggable.enabled)
        gridOptions.draggable.enabled = false;
    }

    $scope.allIcons = allIcons;
    $scope.gridsterModalOptions = gridsterModalOptions;
    $scope.selectedIcon = "img/_blank.png";

    $scope.selectIcon = function(iconUrl) {
      $scope.selectedIcon = iconUrl;
    }

    $scope.openMainModal = function(size, parentSelector) {
      gridOptions.draggable.enabled = false;
      $scope.deleteEnabled = false;

      var parentElem = parentSelector ? 
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'mainModal.html',
        controller: 'dashboardCtrl',
        size: 'lg',
        appendTo: parentElem
      });
    };

    $scope.openAuthModal = function(size, parentSelector) {
      var parentElem = parentSelector ? 
        angular.element($document[0].querySelector('.modal-demo')) : undefined;

      var modalInstance = $uibModal.open({
        templateUrl: 'authModal.html',
        controller: 'authCtrl',
        controllerAs: '$auth',
        appendTo: parentElem,
      });
    };

  };

})();


(function () {

  angular
    .module('nerveCenter')
    .directive('selectText', selectText);

  function selectText($window) {
    return {
      link: function(scope, element) {
        element.on('click', function() {
          var selection = $window.getSelection();        
          var range = document.createRange();
          range.selectNodeContents(element[0]);
          selection.removeAllRanges();
          selection.addRange(range);
        });
      }
    }
  }

})();


(function() {

  angular
    .module('nerveCenter')
    .service('meanData', meanData);

  meanData.$inject = ['$http', 'auth'];
  function meanData($http, auth) {

    var getProfile = function() {
      return $http.get('/api/user', {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
    };

    var updateWidgets = function(data) {
      return $http.put('/api/user', data, {
        headers: {
          Authorization: 'Bearer '+ auth.getToken()
        }
      });
      // $http({
      //   method: 'PUT',
      //   url: '/api/user/' ,
      //   headers: {
      //     Authorization: 'Bearer ' + auth.getToken()
      //   },
      //   data: {'STRING!': 'string'} 
      // }).then(function successCallback(res) {
      //   console.log("Widget Updated:", res)
      // }, function errorCallback(res) {
      //   if(res.status = 401){
      //     console.error("Unauthorized User")
      //   }
      // });
      // return $http.put('/api/user/' + auth.currentUser().id, {
      //   headers: {
      //     Authorization: 'Bearer '+ auth.getToken()
      //   }
      // });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets
    };
  }

})();


var allIcons = [
  { icon:"img/BNK.png" },
  { icon:"img/CNN.png" },
  { icon:"img/Drive.png" },
  { icon:"img/FreePress.png" },
  { icon:"img/GitHub.png" },
  { icon:"img/Google.png" },
  { icon:"img/Image.png" },
  { icon:"img/Indeed.png" },
  { icon:"img/Launch.png" },
  { icon:"img/Linked.png" },
  { icon:"img/Notes.png" },
  { icon:"img/ReadLater.png" },
  { icon:"img/RTorrent.png" },
  { icon:"img/Slack.png" },
  { icon:"img/Tape.png" },
  { icon:"img/Trend.png" },
  { icon:"img/Tube.png" },
  { icon:"img/Twitter.png" },
  { icon:"img/Wiki.png" }
];

var gridOptions = {
  columns: 7,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  defaultSizeX: 1,
  defaultSizeY: 1,
  resizable: {
    enabled: false,
  },
  draggable: {
    enabled: false,
    stop: function(event, $element, widget) {
      console.log($element.scope().gridster.grid);
      // console.log($element.scope().gridster.grid);
    }
  }
};


var gridsterModalOptions = {
  columns: 6,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: false,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};


//# sourceMappingURL=app.min.js.map
