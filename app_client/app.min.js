(function () {

  angular.module('nerveCenter', ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap', 'gridster', 'pr.longpress']);

  function config ($routeProvider, $locationProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'dashboard/dashboard.view.html',
        controller: 'dashboardCtrl as $ctrl',
        controllerAs: 'vm'
      })
      .when('/register', {
        templateUrl: '/auth/register/register.view.html',
        controller: 'registerCtrl',
        controllerAs: 'vm'
      })
      .when('/login', {
        templateUrl: '/auth/login/login.view.html',
        controller: 'loginCtrl',
        controllerAs: 'vm'
      })
      .when('/profile', {
        templateUrl: '/profile/profile.view.html',
        controller: 'profileCtrl',
        controllerAs: 'vm'
      })
      .otherwise({redirectTo: '/'});

    // use the HTML5 History API
    $locationProvider.html5Mode(true);
  }

  function run($rootScope, $location, $http, authentication) {
    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {
      if ($location.path() === '/profile' && !authentication.isLoggedIn()) {
        $location.path('/');
      }
    });
  }
  
  angular
    .module('nerveCenter')
    .config(['$routeProvider', '$locationProvider', config])
    .run(['$rootScope', '$location', '$uibModal', 'authentication', run]);

})();

(function() { 
  angular
    .module('nerveCenter')
    .controller('dashboardCtrl', dashboardCtrl);

  function dashboardCtrl($scope, $http, $location, $uibModal, $log, $document, meanData, authentication) {
    var $dash = this;

    $dash.widgets = {};
    console.log("Token", authentication.currentUser());
    $scope.$watch('widgets', function(widgets){
      console.log("changed");
    }, true);

    function updateWidgets() {
      meanData.getProfile()
        .success(function(data) {
          $dash.widgets = data.widgets;
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function() {
          $scope.widgets = angular.fromJson($dash.widgets);
          $scope.gridOptions = gridOptions;
    // id = authentication.currentUser().id;
    // $scope.saveWidget(id);
        });
    }

    updateWidgets();

    $scope.saveWidgets = function() {
      data = "{}";

      meanData.updateWidgets()
        .success(function(data) {
          $dash.widgets = data.widgets;
        })
        .error(function (e) {
          console.log(e);
        })
        .finally(function() {
          // $scope.widgets = angular.fromJson($dash.widgets);
          // $scope.gridOptions = gridOptions;
        });
    }

    $scope.saveWidget = function(id) {
      // var newWidget = {
      //   url: $scope.widgetUrl, 
      //   icon: $scope.widgetIcon,
      //   row: $scope.widgetRow,
      //   col: $scope.widgetCol,
      //   sizeX: 1,
      //   sizeY: 1
      // }
      // $scope.widgets.push(newWidget);
      console.log(id);
      data = "{}";
      $http.put('api/profile/' + id, data)
        .success(function(response) {
          console.log("RES",response);
        })
        .error(function (data, status, header, config) {
          console.log("Put Error", data)
        });
    };

    $scope.update = function() {
      id = authentication.currentUser().id;
      console.log(id);
      $http.put('/api/profile/' + $scope.contact._id, $scope.contact).success(function(response) {
        refresh();

      })
    };

    $dash.open = function (size, parentSelector) {
      var parentElem = parentSelector ? 
        angular.element($document[0].querySelector('.modal-demo')) : undefined;
      var modalInstance = $uibModal.open({
        animation: true,
        ariaLabelledBy: 'modal-title',
        ariaDescribedBy: 'modal-body',
        templateUrl: 'myModalContent.html',
        controller: 'utilityModalCtrl',
        controllerAs: '$dash',
        size: size,
        appendTo: parentElem,
        resolve: {
          items: function () {
            return $dash.items;
          }
        }
      });
    };


    $dash.onLongPress = function () {
      $dash.open();
    };
  };
})();

(function() {

  angular
    .module('nerveCenter')
    .controller('profileCtrl', profileCtrl);

  profileCtrl.$inject = ['$location', 'meanData'];
  function profileCtrl($location, meanData) {
    var vm = this;

    vm.user = {};

    meanData.getProfile()
      .success(function(data) {
        vm.user = data;
      })
      .error(function (e) {
        console.log(e);
      });
  }

})();

(function () {

  angular
  .module('nerveCenter')
  .controller('loginCtrl', loginCtrl);

  loginCtrl.$inject = ['$location', 'authentication'];
  function loginCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      authentication
        .login(vm.credentials)
        .error(function(err){
          alert(err);
        })
        .then(function(){
          $location.path('profile');
        });
    };

  }

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('registerCtrl', registerCtrl);

  registerCtrl.$inject = ['$location', 'authentication'];
  function registerCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      name : "",
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      console.log('Submitting registration');
      authentication
        .register(vm.credentials)
        .error(function(err){
          alert(err);
        })
        .then(function(){
          $location.path('profile');
        });
    };

  }

})();

(function () {

  angular
    .module('nerveCenter')
    .service('authentication', authentication);

  authentication.$inject = ['$http', '$window'];
  function authentication($http, $window) {

    var saveToken = function (token) {
      $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
      return $window.localStorage['mean-token'];
    };

    var isLoggedIn = function() {
      var token = getToken();
      var payload;

      if(token){
        payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);

        return payload.exp > Date.now() / 1000;
      } else {
        return false;
      }
    };

    var currentUser = function() {
      if(isLoggedIn()){
        var token = getToken();
        var payload = token.split('.')[1];
        payload = $window.atob(payload);
        payload = JSON.parse(payload);
        return {
          id : payload._id,
          email : payload.email,
          name : payload.name,
          widgets : payload.widgets
        };
      }
    };

    register = function(user) {
      return $http.post('/api/register', user).success(function(data){
        saveToken(data.token);
      });
    };

    login = function(user) {
      return $http.post('/api/login', user).success(function(data) {
        saveToken(data.token);
      });
    };

    logout = function() {
      $window.localStorage.removeItem('mean-token');
    };

    return {
      currentUser : currentUser,
      saveToken : saveToken,
      getToken : getToken,
      isLoggedIn : isLoggedIn,
      register : register,
      login : login,
      logout : logout
    };
  }

})();

(function() {

  angular
    .module('nerveCenter')
    .service('meanData', meanData);

  meanData.$inject = ['$http', 'authentication'];
  function meanData($http, authentication) {

    var getProfile = function() {
      return $http.get('/api/profile', {
        headers: {
          Authorization: 'Bearer '+ authentication.getToken()
        }
      });
    };

    var updateWidgets = function() {
      $http( {
        method: 'PUT',
        url: '/api/profile/58b243dc0c75e6925e981268',
        headers: {
          Authorization: 'Bearer ' + authentication.getToken()
        },
        data: { test: 'test' }
      }).then(function successCallback(response) {
        $log.log("OK")
      }, function errorCallback(response) {
        if(response.status = 401){ // If you have set 401
          $log.log("ohohoh")
        }
      });
      return $http.put('/api/profile/' + authentication.currentUser().id, {
        headers: {
          Authorization: 'Bearer '+ authentication.getToken()
        }
      });
    };

    return {
      getProfile : getProfile,
      updateWidgets: updateWidgets
    };
  }

})();


(function () {

  angular
    .module('nerveCenter')
    .service('getWidgets', getWidgets);

  function getWidgets(ngResource, globalsService) {
    var widgetsResource = ngResource("/api/widget", {},
      {
        "put": {"method": "PUT", "params": {"action": "Put"} }
      });
    return configResource;
  };

})();

(function() {

  angular
    .module('nerveCenter')
    .component('modalComponent', {
      templateUrl: 'myModalContent.html',
      bindings: {
        resolve: '<',
        close: '&',
        dismiss: '&'
      },
      controller: function () {
        var $dash = this;

        $dash.$onInit = function () {
          $dash.items = $dash.resolve.items;
          $dash.selected = {
            item: $dash.items[0]
          };
        };

        $dash.ok = function () {
          $dash.close({$value: $dash.selected.item});
        };

        $dash.cancel = function () {
          $dash.dismiss({$value: 'cancel'});
        };
      }
    });
})();

(function() {

  angular
    .module('nerveCenter')
    .controller('utilityModalCtrl', utilityModalCtrl);
  
  function utilityModalCtrl($uibModalInstance, items) {
    var $dash = this;

    $dash.ok = function () {
      $uibModalInstance.close($dash.selected.item);
    };

    $dash.cancel = function () {
      $uibModalInstance.dismiss('cancel');
    };
  };

})();

var gridOptions = {
  columns: 5,
  pushing: true,
  floating: true,
  swapping: true,
  width: 'auto',
  colWidth: 'auto',
  rowHeight: 'match',
  margins: [10, 10],
  outerMargin: true,
  sparse: false,
  isMobile: false,
  mobileBreakPoint: 600,
  mobileModeEnabled: true,
  minColumns: 1,
  minRows: 1,
  maxRows: 100,
  defaultSizeX: 1,
  defaultSizeY: 1,
  minSizeX: 1,
  maxSizeX: null,
  minSizeY: 1,
  maxSizeY: null,
  resizable: {
    enabled: false,
    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],
    start: function(event, $element, widget) {},
    resize: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  },
  draggable: {
    enabled: false,
    handle: '.my-class',
    start: function(event, $element, widget) {},
    drag: function(event, $element, widget) {},
    stop: function(event, $element, widget) {}
  }
};

(function() {

  angular
    .module('nerveCenter')
    .controller('widgetsCtrl', widgetsCtrl);

  widgetsCtrl.$inject = ['$location', 'meanData'];
  function widgetsCtrl($location, meanData) {
    var vm = this;

    vm.user = {};

    meanData.getProfile()
      .success(function(data) {
        vm.user.widgets = data;
      })
      .error(function (e) {
        console.log(e);
      });
  }

})();

(function () {

  angular
    .module('nerveCenter')
    .controller('navigationCtrl', navigationCtrl);

  navigationCtrl.$inject = ['$location','authentication'];
  function navigationCtrl($location, authentication) {
    var vm = this;

    vm.isLoggedIn = authentication.isLoggedIn();

    vm.currentUser = authentication.currentUser();

  }

})();

(function () {

  angular
    .module('nerveCenter')
    .directive('navigation', navigation);

  function navigation () {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/navigation/navigation.template.html',
      controller: 'navigationCtrl as navvm'
    };
  }

})();

//# sourceMappingURL=app.min.js.map
