{"version":3,"sources":["main.js","auth/auth.controller.js","auth/auth.service.js","dashboard/dashboard.controller.js","common/services/apiData.service.js","dashboard/gridster/allIcons.js","dashboard/gridster/gridster.options.js","dashboard/gridster/gridsterModal.options.js","common/directives/scrollDown.directive.js","common/directives/selectText.directive.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["(function () {\n\n  angular.module('nerveCenter',\n    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',\n     'gridster', 'infinite-scroll']);\n\n  function config($routeProvider, $locationProvider) {\n    $routeProvider\n      .when('/', {\n        templateUrl: 'dashboard/dashboard.view.html',\n        controller: 'dashboardCtrl',\n      })\n      .otherwise({redirectTo: '/'});\n\n    // HTML5 History API\n    $locationProvider.html5Mode(true);\n  }\n\n  function run($rootScope, $location, $http, auth) {\n    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {\n      if ($location.path() === '/profile' && !auth.isLoggedIn()) {\n        $location.path('/');\n      }\n    });\n  }\n\n  angular\n    .module('nerveCenter')\n    .config(['$routeProvider', '$locationProvider', config])\n    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);\n\n})();\n","(function () {\n\n  angular\n    .module('nerveCenter')\n    .controller('authCtrl', authCtrl);\n\n  authCtrl.$inject = ['$location', 'auth', 'apiData'];\n  function authCtrl($location, auth, apiData) {\n    var $auth = this;\n\n    $auth.credentials = {\n      email : \"\",\n      password : \"\"\n    };\n\n    $auth.onReg = function () {\n      auth\n        .register($auth.credentials)\n        .error(function(err){\n          alert(err);\n        })\n        .then(function (){\n          $location.path('../dashboard/dashboard.view');\n        });\n    };\n    \n    $auth.user = {};\n\n    $auth.onLogin = function () {\n      auth\n        .login($auth.credentials)\n        .error(function(err){\n          alert(err);\n        })\n        .then(function (){\n          $location.path('../dashboard/dashboard.view');\n        });\n    }\n  }\n\n})();\n","(function () {\n\n  angular\n    .module('nerveCenter')\n    .service('auth', auth);\n\n  auth.$inject = ['$http', '$window'];\n  function auth($http, $window) {\n\n    var saveToken = function(token) {\n      $window.localStorage['mean-token'] = token;\n    };\n\n    var getToken = function () {\n      return $window.localStorage['mean-token'];\n    };\n\n    var isLoggedIn = function () {\n      var token = getToken();\n      var payload;\n\n      if(token){\n        payload = token.split('.')[1];\n        payload = $window.atob(payload);\n        payload = JSON.parse(payload);\n\n        return payload.exp > Date.now() / 1000;\n      } else {\n        return false;\n      }\n    };\n\n    var currentUser = function () {\n      if(isLoggedIn()){\n        var token = getToken();\n        var payload = token.split('.')[1];\n        payload = $window.atob(payload);\n        payload = JSON.parse(payload);\n        return {\n          id : payload._id,\n          email : payload.email,\n          widgets : payload.widgets\n        };\n      }\n    };\n\n    register = function(user) {\n      return $http.post('/api/register', user).success(function(data){\n        saveToken(data.token);\n      });\n    };\n\n    login = function(user) {\n      return $http.post('/api/login', user).success(function(data) {\n        saveToken(data.token);\n      });\n    };\n\n    logout = function () {\n      $window.localStorage.removeItem('mean-token');\n    };\n\n    return {\n      currentUser : currentUser,\n      saveToken : saveToken,\n      getToken : getToken,\n      isLoggedIn : isLoggedIn,\n      register : register,\n      login : login,\n      logout : logout\n    };\n  }\n\n})();\n\n","(function () { \n\n  angular\n    .module('nerveCenter')\n    .controller('dashboardCtrl', dashboardCtrl);\n\n  function dashboardCtrl($scope, $http, $location, \n    $uibModal, $log, $document, $filter, $window, apiData, auth) {\n\n    var $dshBrd = this;\n\n    $scope.draggable = false;\n    $scope.deleteEnabled = false;\n    $scope.urlsEnabled = true;\n    $scope.areIconsLoaded = false;\n\n    updateWidgets();\n    getIcons();\n\n    function instantiateGridster() {\n      var width = this.window.innerWidth;\n      var adjustedGridOptions = gridOptions;\n      if (width > 1000) {\n        adjustedGridOptions.columns = 7; \n      } else if (width > 500) {\n        adjustedGridOptions.columns = 6; \n      } else {\n        adjustedGridOptions.columns =3;\n      }\n      return adjustedGridOptions;\n    }\n\n    function checkScreenSize() {\n      var start = $window.innerWidth;\n      if (start > 1000) {\n        $dshBrd.screenSize = 'lg';\n      } else if (start > 500) {\n values        $dshBrd.screenSize = 'md';\n      } else {\n        $dshBrd.screenSize = 'sm';\n      }\n    }\n\n    function updateWidgets() {\n      checkScreenSize();\n      apiData.getProfile()\n        .success(function (user) {\n          $dshBrd.widgetsLg = angular.fromJson(user.widgetsLg);\n          $dshBrd.widgetsMd = angular.fromJson(user.widgetsMd);\n          $dshBrd.widgetsSm = angular.fromJson(user.widgetsSm);\n        })\n        .error(function () {\n          $scope.openAuthModal();\n        })\n        .finally(function () {\n          if ($dshBrd.screenSize == 'lg') {\n            $scope.widgets = $dshBrd.widgetsLg;\n          } else if ($dshBrd.screenSize == 'md') {\n            $scope.widgets = $dshBrd.widgetsMd;\n          } else {\n            $scope.widgets = $dshBrd.widgetsSm;\n          }\n          $scope.gridOptions = instantiateGridster();\n          $dshBrd.currentWidth = $window.innerWidth;\n        });\n    }\n\n    $dshBrd.saveWidgets = function () {\n      checkScreenSize();\n\n      if ($dshBrd.screenSize == 'lg') {\n        $dshBrd.widgetsLg = $scope.widgets;\n      } else if ($dshBrd.screenSize == 'md') {\n        $dshBrd.widgetsMd = $scope.widgets;\n      } else {\n        $dshBrd.widgetsSm = $scope.widgets;\n      }\n\n      data = [\n        $dshBrd.widgetsLg,\n        $dshBrd.widgetsMd,\n        $dshBrd.widgetsSm\n      ];\n\n      apiData.updateWidgets(data)\n        .success(function (data) {\n          console.log(\"Success!: \", data)\n        })\n        .error(function (e) {\n          console.log(e);\n        });\n    }\n\n    $scope.createWidget = function () {\n      var widgetUrl = $scope.widgetUrl;\n      var widgetWeight = $scope.widgetWeight;\n      var widgetIcon = $scope.selectedIcon;\n      console.log(widgetIcon);\n\n      var defaultIcon = \"img/_blank.png\";\n      // Form validation \n      if (!widgetUrl && widgetIcon === defaultIcon) {\n        window.alert(\"Please Enter URL and Select an Icon\");\n        return;\n      } else if (!widgetUrl) {\n        window.alert(\"Please Enter URL\");\n        return;\n      } else if (widgetIcon === defaultIcon) {\n        window.alert(\"Please Select an Icon\");\n        return;\n      }\n\n      function pushNewWidget(size) {\n        if (size === 'lg') {\n          var len = $dshBrd.widgetsLg.length;\n          var columns = 7;\n          var newWidget = createNewWidget(len, columns);\n          $dshBrd.widgetsLg.push(newWidget);\n        } else if (size === 'md') {\n          var len = $dshBrd.widgetsMd.length;\n          var columns = 6;\n          var newWidget = createNewWidget(len, columns);\n          $dshBrd.widgetsMd.push(newWidget);\n        } else if (size === 'sm') {\n          var len = $dshBrd.widgetsSm.length;\n          var columns = 3;\n          var newWidget = createNewWidget(len, columns);\n          $dshBrd.widgetsSm.push(newWidget);\n        }\n      }\n\n      function createNewWidget(len, columns) {\n        var newWidget = {\n          icon: widgetIcon,\n          url: widgetUrl,\n          row: Math.floor(len / columns),\n          col: (len % columns) + 1 \n        }\n        return newWidget;\n      }\n\n      pushNewWidget('lg');\n      pushNewWidget('md');\n      pushNewWidget('sm');\n\n      $dshBrd.saveWidgets();\n      $location.path('dashboard.view');\n    }\n\n\n    $scope.importWidgets = function () {\n      var widgetString = angular.fromJson($scope.widgetString);\n      $scope.widgets = widgetString;\n\n      checkScreenSize();\n      if ($dshBrd.screenSize == 'lg') {\n        $dshBrd.widgetsLg = widgetString;\n      } else if ($dshBrd.screenSize == 'md') {\n        $dshBrd.widgetsMd = widgetString;\n      } else {\n        $dshBrd.widgetsSm = widgetString;\n      }\n\n      $dshBrd.saveWidgets();\n      $location.path('dashboard.view');\n    } \n\n    $scope.deleteWidget = function (widget) {\n      $scope.widgets = $scope.widgets.filter(function (element){\n        return element.url != widget.url;\n      });\n\n      $dshBrd.saveWidgets();\n    }\n\n    $scope.toggleDraggable = function () {\n      gridOptions.draggable.enabled = !gridOptions.draggable.enabled;\n      $scope.urlsEnabled = !$scope.urlsEnabled;\n      if ($scope.deleteEnabled)\n        $scope.deleteEnabled = false;\n      if (!gridOptions.draggable.enabled)\n        $dshBrd.saveWidgets();\n    }\n\n    $scope.toggleDelete = function () {\n      $scope.deleteEnabled = !$scope.deleteEnabled;\n      $scope.urlsEnabled = !$scope.urlsEnabled;\n      if (gridOptions.draggable.enabled)\n        gridOptions.draggable.enabled = false;\n    }\n\n    function getIcons() {\n      apiData.getIcons()\n        .success(function (icons) {\n          $dshBrd.icons = icons;\n        })\n        .finally(function () {\n          $dshBrd.allIcons = [];\n          var len = $dshBrd.icons.length;\n\n          for (i = 0; i < len; i++) {\n            var iconObj = {};\n            var iconString = 'img/ico/' + $dshBrd.icons[i];\n            iconObj.path = iconString;\n            $dshBrd.allIcons.push(iconObj);\n          }\n          $scope.shownIcons = [];\n          $scope.loadSomeIcons();\n        });\n    }\n\n    $scope.loadAllIcons = function () {\n      var shownLen = $scope.shownIcons.length;\n      var totalIcons = $dshBrd.allIcons.length;\n      var iconsRemaining = totalIcons - shownLen - 1;\n      $scope.areIconsLoaded = true;\n      for (var i = shownLen; i <= iconsRemaining; i++) {\n        var newIco = $dshBrd.allIcons[shownLen + i]\n        $scope.shownIcons.push(newIco);\n      }\n    }\n\n    $scope.loadSomeIcons = function () {\n      var shownLen = $scope.shownIcons.length;\n      for (var i = 1; i <= 24; i++) {\n        var newIco = $dshBrd.allIcons[shownLen + i]\n        $scope.shownIcons.push(newIco);\n      }\n    }\n\n    $scope.gridsterModalOptions = gridsterModalOptions;\n    $scope.selectedIcon = \"img/_blank.png\";\n\n    $scope.selectIcon = function (iconPath) {\n      $scope.selectedIcon = iconPath;\n    }\n\n    $scope.openMainModal = function (size, parentSelector) {\n      gridOptions.draggable.enabled = false;\n      $scope.deleteEnabled = false;\n\n      var parentElem = parentSelector ? \n        angular.element($document[0].querySelector('.modal-demo')) : undefined;\n\n      var modalInstance = $uibModal.open({\n        templateUrl: 'mainModal.html',\n        controller: 'dashboardCtrl',\n        size: 'lg',\n        appendTo: parentElem\n      });\n    };\n\n    $scope.openAuthModal = function (size, parentSelector) {\n      var parentElem = parentSelector ? \n        angular.element($document[0].querySelector('.main-modal')) : undefined;\n\n      var modalInstance = $uibModal.open({\n        templateUrl: 'authModal.html',\n        controller: 'authCtrl',\n        controllerAs: '$auth',\n        appendTo: parentElem,\n      });\n    };\n\n    $scope.onLogout = function () {\n      auth.logout();\n      $location.path('dashboard.view');\n    }\n\n    $scope.syncWidgets = function () {\n      $dshBrd.widgetsLg = $scope.widgets;\n      $dshBrd.widgetsMd = $scope.widgets;\n      $dshBrd.widgetsSm = $scope.widgets;\n      $dshBrd.saveWidgets();\n      $location.path('dashboard.view');\n    }\n\n    $scope.resetWidgets = function () {\n      checkScreenSize();\n\n      apiData.getDefaultGrid()\n        .success(function (defaultGrid) {\n          defaultGrid = angular.fromJson(defaultGrid);\n          $scope.widgets = defaultGrid;\n          if ($dshBrd.screenSize == 'lg') {\n            $dshBrd.widgetsLg = defaultGrid;\n          } else if ($dshBrd.screenSize == 'md') {\n            $dshBrd.widgetsMd = defaultGrid;\n          } else {\n            $dshBrd.widgetsSm = defaultGrid;\n          }\n        })\n        .error(function (e) {\n          console.log(e);\n        })\n        .finally(function () {\n          $dshBrd.saveWidgets();\n        });\n    }\n\n    var resizeBreaks = {\n      'md' : 1000,\n      'sm' : 500\n    };\n\n    angular.element($window).bind('resize', function () {\n      var oldWidth = $dshBrd.currentWidth;\n      var newWidth = $window.innerWidth;\n\n      if ((oldWidth > resizeBreaks['md'] && newWidth < resizeBreaks['md'])\n        || (oldWidth < resizeBreaks['md'] && newWidth > resizeBreaks['md'])\n        || (oldWidth > resizeBreaks['sm'] && newWidth < resizeBreaks['sm'])\n        || (oldWidth < resizeBreaks['sm'] && newWidth > resizeBreaks['sm'])) {\n\n        updateWidgets();\n      }\n    });\n\n  };\n})();\n\n","(function () {\n\n  angular\n    .module('nerveCenter')\n    .service('apiData', apiData);\n\n  apiData.$inject = ['$http', 'auth'];\n  function apiData($http, auth) {\n\n    var getProfile = function () {\n      return $http.get('/api/user', {\n        headers: {\n          Authorization: 'Bearer '+ auth.getToken()\n        }\n      });\n    };\n\n    var updateWidgets = function(data) {\n      return $http.put('/api/user', data, {\n        headers: {\n          Authorization: 'Bearer '+ auth.getToken()\n        }\n      });\n    };\n\n    var getIcons = function(data) {\n      return $http.get('/api/ico', data, {\n        headers: {\n          Authorization: 'Bearer '+ auth.getToken()\n        }\n      });\n    };\n\n    var getDefaultGrid = function (data) {\n      return $http.get('/api/defaultgrid', data, {\n        headers: {\n          Authorization: 'Bearer '+ auth.getToken()\n        }\n      });\n    };\n\n    return {\n      getProfile : getProfile,\n      updateWidgets: updateWidgets,\n      getIcons: getIcons,\n      getDefaultGrid: getDefaultGrid\n    };\n\n  }\n\n})();\n\n","var allIcons = [\n  { icon:\"img/BNK.png\" },\n  { icon:\"img/CNN.png\" },\n  { icon:\"img/Drive.png\" },\n  { icon:\"img/FreePress.png\" },\n  { icon:\"img/GitHub.png\" },\n  { icon:\"img/Google.png\" },\n  { icon:\"img/Image.png\" },\n  { icon:\"img/Indeed.png\" },\n  { icon:\"img/Launch.png\" },\n  { icon:\"img/Linked.png\" },\n  { icon:\"img/Notes.png\" },\n  { icon:\"img/ReadLater.png\" },\n  { icon:\"img/RTorrent.png\" },\n  { icon:\"img/Slack.png\" },\n  { icon:\"img/Tape.png\" },\n  { icon:\"img/Trend.png\" },\n  { icon:\"img/Tube.png\" },\n  { icon:\"img/Twitter.png\" },\n  { icon:\"img/Wiki.png\" }\n];\n","var gridOptions = {\n  columns: 7,\n  pushing: true,\n  floating: true,\n  swapping: true,\n  width: 'auto',\n  colWidth: 'auto',\n  rowHeight: 'match',\n  margins: [10, 10],\n  outerMargin: true,\n  sparse: false,\n  isMobile: false,\n  mobileBreakPoint: 600,\n  mobileModeEnabled: false,\n  defaultSizeX: 1,\n  defaultSizeY: 1,\n  resizable: {\n    enabled: false,\n  },\n  draggable: {\n    enabled: false,\n    stop: function(event, $element, widget) {\n      console.log($element.scope().gridster.grid);\n      // console.log($element.scope().gridster.grid);\n    }\n  }\n};\n\n","var gridsterModalOptions = {\n  columns: 6,\n  pushing: true,\n  floating: true,\n  swapping: true,\n  width: 'auto',\n  colWidth: 'auto',\n  rowHeight: 'match',\n  margins: [10, 10],\n  outerMargin: true,\n  sparse: false,\n  isMobile: false,\n  mobileBreakPoint: 600,\n  mobileModeEnabled: false,\n  minColumns: 1,\n  minRows: 1,\n  maxRows: 100,\n  defaultSizeX: 1,\n  defaultSizeY: 1,\n  minSizeX: 1,\n  maxSizeX: null,\n  minSizeY: 1,\n  maxSizeY: null,\n  resizable: {\n    enabled: false,\n    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],\n    start: function(event, $element, widget) {},\n    resize: function(event, $element, widget) {},\n    stop: function(event, $element, widget) {}\n  },\n  draggable: {\n    enabled: false,\n    handle: '.my-class',\n    start: function(event, $element, widget) {},\n    drag: function(event, $element, widget) {},\n    stop: function(event, $element, widget) {}\n  }\n};\n\n","(function () {\n\n  angular\n    .module('nerveCenter')\n    .directive('scrolly', scrolly);\n\n  function scrolly($window) {\n    return {\n      restrict: 'AEC',\n      link: function (scope, element, attrs) {\n        var raw = element[0];\n        console.log('loading directive');\n\n        element.bind('scroll', function () {\n          console.log('in scroll');\n          console.log(raw.scrollTop + raw.offsetHeight);\n          console.log(raw.scrollHeight);\n          if (raw.scrollTop + raw.offsetHeight > raw.scrollHeight) {\n            scope.$apply(attrs.scrolly);\n          }\n        });\n      }\n      // return {\n      //   restrict: 'A',\n      //   link: function(scope, element, attrs) {\n      //     var raw = element[0];\n\n      //     element.bind('scroll', function () {\n      //       // var yPosition = raw.scrollTop + raw.offsetHeight;\n      //       // if (yPosition > scope.lastYPosition) {\n      //         console.log('in scroll');\n      //         console.log(raw.scrollTop + raw.offsetHeight);\n      //         console.log(raw.scrollHeight);\n      //       // }\n      //       scope.lastYPosition = yPosition;\n      //     });\n      //   }\n      // };\n    };\n    };\n  });\n\n","(function () {\n\n  angular\n    .module('nerveCenter')\n    .directive('selectText', selectText);\n\n  function selectText($window) {\n    return {\n      link: function(scope, element) {\n        element.on('click', function () {\n          var selection = $window.getSelection();        \n          var range = document.createRange();\n          range.selectNodeContents(element[0]);\n          selection.removeAllRanges();\n          selection.addRange(range);\n        });\n      }\n    }\n  }\n\n})();\n\n"]}