{"version":3,"sources":["main.js","auth/auth.controller.js","auth/auth.service.js","dashboard/dashboard.controller.js","common/directives/selectText.directive.js","common/services/data.service.js","dashboard/gridster/allIcons.js","dashboard/gridster/gridster.options.js","dashboard/gridster/gridsterModal.options.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzpOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["(function() {\n\n  angular.module('nerveCenter',\n    ['ngRoute', 'ngAnimate', 'ngSanitize', 'ui.bootstrap',\n     'gridster']);\n\n  function config($routeProvider, $locationProvider) {\n    $routeProvider\n      .when('/', {\n        templateUrl: 'dashboard/dashboard.view.html',\n        controller: 'dashboardCtrl',\n      })\n      .otherwise({redirectTo: '/'});\n\n    // HTML5 History API\n    $locationProvider.html5Mode(true);\n  }\n\n  function run($rootScope, $location, $http, auth) {\n    $rootScope.$on('$routeChangeStart', function(event, nextRoute, currentRoute) {\n      if ($location.path() === '/profile' && !auth.isLoggedIn()) {\n        $location.path('/');\n      }\n    });\n  }\n\n  angular\n    .module('nerveCenter')\n    .config(['$routeProvider', '$locationProvider', config])\n    .run(['$rootScope', '$location', '$uibModal', 'auth', run]);\n\n})();\n","(function () {\n\n  angular\n    .module('nerveCenter')\n    .controller('authCtrl', authCtrl);\n\n  authCtrl.$inject = ['$location', 'auth', 'meanData'];\n  function authCtrl($location, auth, meanData) {\n    var $auth = this;\n\n    $auth.credentials = {\n      email : \"\",\n      password : \"\"\n    };\n\n    $auth.onReg = function() {\n      auth\n        .register($auth.credentials)\n        .error(function(err){\n          alert(err);\n        })\n        .then(function(){\n          $location.path('../dashboard/dashboard.view');\n        });\n    };\n    \n    $auth.user = {};\n\n    $auth.onLogin = function() {\n      auth\n        .login($auth.credentials)\n        .error(function(err){\n          alert(err);\n        })\n        .then(function(){\n          $location.path('../dashboard/dashboard.view');\n        });\n    }\n  }\n\n})();\n","(function() {\n\n  angular\n    .module('nerveCenter')\n    .service('auth', auth);\n\n  auth.$inject = ['$http', '$window'];\n  function auth($http, $window) {\n\n    var saveToken = function(token) {\n      $window.localStorage['mean-token'] = token;\n    };\n\n    var getToken = function() {\n      return $window.localStorage['mean-token'];\n    };\n\n    var isLoggedIn = function() {\n      var token = getToken();\n      var payload;\n\n      if(token){\n        payload = token.split('.')[1];\n        payload = $window.atob(payload);\n        payload = JSON.parse(payload);\n\n        return payload.exp > Date.now() / 1000;\n      } else {\n        return false;\n      }\n    };\n\n    var currentUser = function() {\n      if(isLoggedIn()){\n        var token = getToken();\n        var payload = token.split('.')[1];\n        payload = $window.atob(payload);\n        payload = JSON.parse(payload);\n        return {\n          id : payload._id,\n          email : payload.email,\n          widgets : payload.widgets\n        };\n      }\n    };\n\n    register = function(user) {\n      return $http.post('/api/register', user).success(function(data){\n        saveToken(data.token);\n      });\n    };\n\n    login = function(user) {\n      return $http.post('/api/login', user).success(function(data) {\n        saveToken(data.token);\n      });\n    };\n\n    logout = function() {\n      $window.localStorage.removeItem('mean-token');\n    };\n\n    return {\n      currentUser : currentUser,\n      saveToken : saveToken,\n      getToken : getToken,\n      isLoggedIn : isLoggedIn,\n      register : register,\n      login : login,\n      logout : logout\n    };\n  }\n\n})();\n\n","(function() { \n\n  angular\n    .module('nerveCenter')\n    .controller('dashboardCtrl', dashboardCtrl);\n\n  function dashboardCtrl($scope, $http, $location, \n    $uibModal, $log, $document, $filter, $window, meanData, auth) {\n\n    $scope.draggable = false;\n    $scope.deleteEnabled = false;\n    $scope.urlsEnabled = true;\n\n    updateWidgets();\n\n    function instantiateGridster() {\n      var width = this.window.innerWidth;\n      var adjustedGridOptions = gridOptions;\n      if (width > 1000) {\n        adjustedGridOptions.columns = 7; \n      } else if (width > 500) {\n        adjustedGridOptions.columns = 6; \n      } else {\n        adjustedGridOptions.columns =3;\n      }\n      return adjustedGridOptions;\n    }\n\n    function checkScreenSize() {\n      var start = $window.innerWidth;\n      if (start > 1000) {\n        $scope.screenSize = 'lg';\n      } else if (start > 500) {\n        $scope.screenSize = 'md';\n      } else {\n        $scope.screenSize = 'sm';\n      }\n      console.log($scope.screenSize);\n    }\n\n    function updateWidgets() {\n      checkScreenSize();\n      meanData.getProfile()\n        .success(function(user) {\n          $scope.widgetsLg = angular.fromJson(user.widgetsLg);\n          $scope.widgetsMd = angular.fromJson(user.widgetsMd);\n          $scope.widgetsSm = angular.fromJson(user.widgetsSm);\n        })\n        .error(function() {\n          $scope.openAuthModal();\n        })\n        .finally(function() {\n          if ($scope.screenSize == 'lg') {\n            $scope.widgets = $scope.widgetsLg;\n          } else if ($scope.screenSize == 'md') {\n            $scope.widgets = $scope.widgetsMd;\n          } else {\n            $scope.widgets = $scope.widgetsSm;\n          }\n          $scope.gridOptions = instantiateGridster();\n        });\n    }\n\n    $scope.saveWidgets = function(action) {\n      checkScreenSize();\n\n      if ($scope.screenSize == 'lg') {\n        $scope.widgetsLg = $scope.widgets;\n      } else if ($scope.screenSize == 'md') {\n        $scope.widgetsMd = $scope.widgets;\n      } else {\n        $scope.widgetsSm = $scope.widgets;\n      }\n\n      data = [\n        $scope.widgetsLg, \n        $scope.widgetsMd, \n        $scope.widgetsSm, \n        { size: $scope.screenSize }\n      ];\n\n      meanData.updateWidgets(data)\n        .success(function(data) {\n          console.log(\"Success!: \", data)\n        })\n        .error(function(e) {\n          console.log(e);\n        });\n    }\n\n    $scope.createWidget = function() {\n      var widgetUrl = $scope.widgetUrl;\n      var widgetWeight = $scope.widgetWeight;\n      var widgetIcon = $scope.selectedIcon;\n\n      var defaultIcon = \"img/_blank.png\";\n      // Handle null values \n      if (!widgetUrl && widgetIcon === defaultIcon) {\n        window.alert(\"Please Enter URL and Select an Icon\");\n        return;\n      } else if (!widgetUrl) {\n        window.alert(\"Please Enter URL\");\n        return;\n      } else if (widgetIcon === defaultIcon) {\n        window.alert(\"Please Select an Icon\");\n        return;\n      }\n\n      var newWidget = {\n        icon: widgetIcon,\n        url: widgetUrl\n      }\n\n      $scope.widgetsLg.push(newWidget);\n      $scope.widgetsMd.push(newWidget);\n      $scope.widgetsSm.push(newWidget);\n      $scope.saveWidgets('create');\n      $location.path('dashboard.view');\n    }\n\n    $scope.syncWidgets = function() {\n      $scope.widgetsLg = $scope.widgets;\n      $scope.widgetsMd = $scope.widgets;\n      $scope.widgetsSm = $scope.widgets;\n      $scope.saveWidgets();\n      location.reload();\n    }\n\n    $scope.importWidgets = function() {\n      $scope.widgets = angular.fromJson($scope.widgetString);\n      $scope.saveWidgets();\n      location.reload();\n    } \n\n    $scope.deleteWidget = function(widget) {\n      $scope.widgets = $scope.widgets.filter(function(element){\n        return element.url != widget.url;\n      });\n\n      $scope.saveWidgets();\n    }\n\n    $scope.onLogout = function() {\n      auth.logout();\n      location.reload();\n    }\n\n    $scope.toggleDraggable = function() {\n      gridOptions.draggable.enabled = !gridOptions.draggable.enabled;\n      $scope.urlsEnabled = !$scope.urlsEnabled;\n      if ($scope.deleteEnabled)\n        $scope.deleteEnabled = false;\n      if (!gridOptions.draggable.enabled)\n        $scope.saveWidgets();\n    }\n\n    $scope.toggleDelete = function() {\n      $scope.deleteEnabled = !$scope.deleteEnabled;\n      $scope.urlsEnabled = !$scope.urlsEnabled;\n      if (gridOptions.draggable.enabled)\n        gridOptions.draggable.enabled = false;\n    }\n\n    function getIcons() {\n      meanData.getIcons()\n        .success(function(icons) {\n          this.icons = icons;\n        })\n        .finally(function() {\n          $scope.allIcons = [];\n          var len = this.icons.length;\n\n          for (i = 0; i < len; i++) {\n            var iconObj = {};\n            var iconString = 'img/ico/' + this.icons[i];\n            iconObj.path = iconString;\n            $scope.allIcons.push(iconObj);\n          }\n        });\n    }\n\n    getIcons();\n    $scope.gridsterModalOptions = gridsterModalOptions;\n    $scope.selectedIcon = \"img/_blank.png\";\n\n    $scope.selectIcon = function(iconPath) {\n      $scope.selectedIcon = iconPath;\n    }\n\n    $scope.openMainModal = function(size, parentSelector) {\n      gridOptions.draggable.enabled = false;\n      $scope.deleteEnabled = false;\n\n      var parentElem = parentSelector ? \n        angular.element($document[0].querySelector('.modal-demo')) : undefined;\n\n      var modalInstance = $uibModal.open({\n        templateUrl: 'mainModal.html',\n        controller: 'dashboardCtrl',\n        size: 'lg',\n        appendTo: parentElem\n      });\n    };\n\n    $scope.openAuthModal = function(size, parentSelector) {\n      var parentElem = parentSelector ? \n        angular.element($document[0].querySelector('.modal-demo')) : undefined;\n\n      var modalInstance = $uibModal.open({\n        templateUrl: 'authModal.html',\n        controller: 'authCtrl',\n        controllerAs: '$auth',\n        appendTo: parentElem,\n      });\n    };\n\n    angular.element($window).bind('resize', function() {\n      if (($scope.screenSize == 'lg' && $window.innerWidth < 1000)\n        || ($scope.screenSize = 'md' && $window.innerWidth > 1000)\n        || ($scope.screenSize = 'md' && $window.innerWidth < 500)\n        || ($scope.screenSize = 'sm' && $window.innerWidth > 500)) {\n        location.reload();\n      }\n    });\n  };\n\n})();\n\n","(function () {\n\n  angular\n    .module('nerveCenter')\n    .directive('selectText', selectText);\n\n  function selectText($window) {\n    return {\n      link: function(scope, element) {\n        element.on('click', function() {\n          var selection = $window.getSelection();        \n          var range = document.createRange();\n          range.selectNodeContents(element[0]);\n          selection.removeAllRanges();\n          selection.addRange(range);\n        });\n      }\n    }\n  }\n\n})();\n\n","(function() {\n\n  angular\n    .module('nerveCenter')\n    .service('meanData', meanData);\n\n  meanData.$inject = ['$http', 'auth'];\n  function meanData($http, auth) {\n\n    var getProfile = function() {\n      return $http.get('/api/user', {\n        headers: {\n          Authorization: 'Bearer '+ auth.getToken()\n        }\n      });\n    };\n\n    var updateWidgets = function(data) {\n      return $http.put('/api/user', data, {\n        headers: {\n          Authorization: 'Bearer '+ auth.getToken()\n        }\n      });\n    };\n\n    var getIcons = function(data) {\n      return $http.get('/api/ico', data, {\n        headers: {\n          Authorization: 'Bearer '+ auth.getToken()\n        }\n      });\n    };\n\n    return {\n      getProfile : getProfile,\n      updateWidgets: updateWidgets,\n      getIcons: getIcons \n    };\n\n  }\n\n})();\n\n","var allIcons = [\n  { icon:\"img/BNK.png\" },\n  { icon:\"img/CNN.png\" },\n  { icon:\"img/Drive.png\" },\n  { icon:\"img/FreePress.png\" },\n  { icon:\"img/GitHub.png\" },\n  { icon:\"img/Google.png\" },\n  { icon:\"img/Image.png\" },\n  { icon:\"img/Indeed.png\" },\n  { icon:\"img/Launch.png\" },\n  { icon:\"img/Linked.png\" },\n  { icon:\"img/Notes.png\" },\n  { icon:\"img/ReadLater.png\" },\n  { icon:\"img/RTorrent.png\" },\n  { icon:\"img/Slack.png\" },\n  { icon:\"img/Tape.png\" },\n  { icon:\"img/Trend.png\" },\n  { icon:\"img/Tube.png\" },\n  { icon:\"img/Twitter.png\" },\n  { icon:\"img/Wiki.png\" }\n];\n","var gridOptions = {\n  columns: 7,\n  pushing: true,\n  floating: true,\n  swapping: true,\n  width: 'auto',\n  colWidth: 'auto',\n  rowHeight: 'match',\n  margins: [10, 10],\n  outerMargin: true,\n  sparse: false,\n  isMobile: false,\n  mobileBreakPoint: 600,\n  mobileModeEnabled: false,\n  defaultSizeX: 1,\n  defaultSizeY: 1,\n  resizable: {\n    enabled: false,\n  },\n  draggable: {\n    enabled: false,\n    stop: function(event, $element, widget) {\n      console.log($element.scope().gridster.grid);\n      // console.log($element.scope().gridster.grid);\n    }\n  }\n};\n\n","var gridsterModalOptions = {\n  columns: 6,\n  pushing: true,\n  floating: true,\n  swapping: true,\n  width: 'auto',\n  colWidth: 'auto',\n  rowHeight: 'match',\n  margins: [10, 10],\n  outerMargin: true,\n  sparse: false,\n  isMobile: false,\n  mobileBreakPoint: 600,\n  mobileModeEnabled: false,\n  minColumns: 1,\n  minRows: 1,\n  maxRows: 100,\n  defaultSizeX: 1,\n  defaultSizeY: 1,\n  minSizeX: 1,\n  maxSizeX: null,\n  minSizeY: 1,\n  maxSizeY: null,\n  resizable: {\n    enabled: false,\n    handles: ['n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'],\n    start: function(event, $element, widget) {},\n    resize: function(event, $element, widget) {},\n    stop: function(event, $element, widget) {}\n  },\n  draggable: {\n    enabled: false,\n    handle: '.my-class',\n    start: function(event, $element, widget) {},\n    drag: function(event, $element, widget) {},\n    stop: function(event, $element, widget) {}\n  }\n};\n\n"]}