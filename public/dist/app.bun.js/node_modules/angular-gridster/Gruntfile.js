'use strict';'use_strict';module.exports=function(grunt){require('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);require('time-grunt')(grunt);grunt.initConfig({pkg:grunt.file.readJSON('package.json'),bump:{options:{files:['package.json','bower.json'],updateConfigs:[],commit:false,push:false,commitMessage:'Release v%VERSION%',commitFiles:['package.json','bower.json']}},connect:{options:{port:9000,hostname:'localhost'},dev:{options:{open:true,livereload:35729}},cli:{options:{}}},jsbeautifier:{options:{config:'.jsbeautifyrc'},files:['demo/**/*.js','src/**/*.js','test/**/*.js','Gruntfile.js','karma.conf.js','bower.json','index.html','ptor.conf.js']},jshint:{options:{jshintrc:'.jshintrc'},files:['src/*.js','test/**/*.js']},karma:{unit:{configFile:'karma.conf.js',background:true,singleRun:false},singleRun:{configFile:'karma.conf.js',singleRun:true}},less:{dist:{options:{compress:true},files:{'dist/angular-gridster.min.css':'src/angular-gridster.less'}},min:{files:{'dist/angular-gridster.css':'src/angular-gridster.less'}}},protractor:{e2e:{options:{configFile:'ptor.conf.js',args:{}}}},uglify:{dist:{options:{banner:['/*',' * <%= pkg.name %>',' * <%= pkg.homepage %>',' *',' * @version: <%= pkg.version %>',' * @license: <%= pkg.license %>',' */\n'].join('\n')},files:{'dist/angular-gridster.min.js':['src/angular-gridster.js']}}},watch:{dev:{files:['Gruntfile.js','karma.conf.js','ptor.conf.js','src/*','test/**/*.js'],tasks:['jsbeautifier','jshint','uglify','less','karma:unit:run'],options:{reload:true,livereload:true,port:35729}},e2e:{files:['src/*','test/**/*.js'],tasks:['jsbeautifier','jshint','uglify','protractor']}}});grunt.registerTask('default',['jsbeautifier','jshint','uglify','less']);grunt.registerTask('dev',['connect:dev','karma:unit:start','watch:dev']);grunt.registerTask('e2e',['connect:cli','protractor','watch:e2e']);grunt.registerTask('test',['connect:cli','karma:singleRun','protractor'])};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9hbmd1bGFyLWdyaWRzdGVyL0dydW50ZmlsZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ3J1bnQiLCJyZXF1aXJlIiwiZmlsdGVyRGV2IiwiZm9yRWFjaCIsImxvYWROcG1UYXNrcyIsImluaXRDb25maWciLCJwa2ciLCJmaWxlIiwicmVhZEpTT04iLCJidW1wIiwib3B0aW9ucyIsImZpbGVzIiwidXBkYXRlQ29uZmlncyIsImNvbW1pdCIsInB1c2giLCJjb21taXRNZXNzYWdlIiwiY29tbWl0RmlsZXMiLCJjb25uZWN0IiwicG9ydCIsImhvc3RuYW1lIiwiZGV2Iiwib3BlbiIsImxpdmVyZWxvYWQiLCJjbGkiLCJqc2JlYXV0aWZpZXIiLCJjb25maWciLCJqc2hpbnQiLCJqc2hpbnRyYyIsImthcm1hIiwidW5pdCIsImNvbmZpZ0ZpbGUiLCJiYWNrZ3JvdW5kIiwic2luZ2xlUnVuIiwibGVzcyIsImRpc3QiLCJjb21wcmVzcyIsIm1pbiIsInByb3RyYWN0b3IiLCJlMmUiLCJhcmdzIiwidWdsaWZ5IiwiYmFubmVyIiwiam9pbiIsIndhdGNoIiwidGFza3MiLCJyZWxvYWQiLCJyZWdpc3RlclRhc2siXSwibWFwcGluZ3MiOiJhQUFBLGFBRUFBLE9BQU9DLE9BQVBELENBQWlCLFNBQVNFLEtBQVQsQ0FBZ0IsQ0FFaENDLFFBQVEsVUFBUkEsRUFBb0JDLFNBQXBCRCxDQUE4QixTQUE5QkEsRUFBeUNFLE9BQXpDRixDQUFpREQsTUFBTUksWUFBdkRILEVBQ0FBLFFBQVEsWUFBUkEsRUFBc0JELEtBQXRCQyxFQUVBRCxNQUFNSyxVQUFOTCxDQUFpQixDQUNoQk0sSUFBS04sTUFBTU8sSUFBTlAsQ0FBV1EsUUFBWFIsQ0FBb0IsY0FBcEJBLENBRFcsQ0FFaEJTLEtBQU0sQ0FDTEMsUUFBUyxDQUNSQyxNQUFPLENBQUMsY0FBRCxDQUFpQixZQUFqQixDQURDLENBRVJDLGNBQWUsRUFGUCxDQUdSQyxPQUFRLEtBSEEsQ0FJ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ZV9tb2R1bGVzL2FuZ3VsYXItZ3JpZHN0ZXIvR3J1bnRmaWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZV9zdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGdydW50KSB7XG5cblx0cmVxdWlyZSgnbWF0Y2hkZXAnKS5maWx0ZXJEZXYoJ2dydW50LSonKS5mb3JFYWNoKGdydW50LmxvYWROcG1UYXNrcyk7XG5cdHJlcXVpcmUoJ3RpbWUtZ3J1bnQnKShncnVudCk7XG5cblx0Z3J1bnQuaW5pdENvbmZpZyh7XG5cdFx0cGtnOiBncnVudC5maWxlLnJlYWRKU09OKCdwYWNrYWdlLmpzb24nKSxcblx0XHRidW1wOiB7XG5cdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdGZpbGVzOiBbJ3BhY2thZ2UuanNvbicsICdib3dlci5qc29uJ10sXG5cdFx0XHRcdHVwZGF0ZUNvbmZpZ3M6IFtdLFxuXHRcdFx0XHRjb21taXQ6IGZhbHNlLFxuXHRcdFx0XHRwdXNoOiBmYWxzZSxcblx0XHRcdFx0Y29tbWl0TWVzc2FnZTogJ1JlbGVhc2UgdiVWRVJTSU9OJScsXG5cdFx0XHRcdGNvbW1pdEZpbGVzOiBbJ3BhY2thZ2UuanNvbicsICdib3dlci5qc29uJ11cblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvbm5lY3Q6IHtcblx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0cG9ydDogOTAwMCxcblx0XHRcdFx0aG9zdG5hbWU6ICdsb2NhbGhvc3QnXG5cdFx0XHR9LFxuXHRcdFx0ZGV2OiB7XG5cdFx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0XHRvcGVuOiB0cnVlLFxuXHRcdFx0XHRcdGxpdmVyZWxvYWQ6IDM1NzI5XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRjbGk6IHtcblx0XHRcdFx0b3B0aW9uczoge31cblx0XHRcdH1cblx0XHR9LFxuXHRcdGpzYmVhdXRpZmllcjoge1xuXHRcdFx0b3B0aW9uczoge1xuXHRcdFx0XHRjb25maWc6ICcuanNiZWF1dGlmeXJjJ1xuXHRcdFx0fSxcblx0XHRcdGZpbGVzOiBbXG5cdFx0XHRcdCdkZW1vLyoqLyouanMnLFxuXHRcdFx0XHQnc3JjLyoqLyouanMnLFxuXHRcdFx0XHQndGVzdC8qKi8qLmpzJyxcblx0XHRcdFx0J0dydW50ZmlsZS5qcycsXG5cdFx0XHRcdCdrYXJtYS5jb25mLmpzJyxcblx0XHRcdFx0J2Jvd2VyLmpzb24nLFxuXHRcdFx0XHQnaW5kZXguaHRtbCcsXG5cdFx0XHRcdCdwdG9yLmNvbmYuanMnXG5cdFx0XHRdXG5cdFx0fSxcblx0XHRqc2hpbnQ6IHtcblx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0anNoaW50cmM6ICcuanNoaW50cmMnXG5cdFx0XHR9LFxuXHRcdFx0ZmlsZXM6IFsnc3JjLyouanMnLCAndGVzdC8qKi8qLmpzJ11cblx0XHR9LFxuXHRcdGthcm1hOiB7XG5cdFx0XHR1bml0OiB7XG5cdFx0XHRcdGNvbmZpZ0ZpbGU6ICdrYXJtYS5jb25mLmpzJyxcblx0XHRcdFx0YmFja2dyb3VuZDogdHJ1ZSxcblx0XHRcdFx0c2luZ2xlUnVuOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdHNpbmdsZVJ1bjoge1xuXHRcdFx0XHRjb25maWdGaWxlOiAna2FybWEuY29uZi5qcycsXG5cdFx0XHRcdHNpbmdsZVJ1bjogdHJ1ZVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bGVzczoge1xuXHRcdFx0ZGlzdDoge1xuXHRcdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdFx0Y29tcHJlc3M6IHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0ZmlsZXM6IHtcblx0XHRcdFx0XHRcImRpc3QvYW5ndWxhci1ncmlkc3Rlci5taW4uY3NzXCI6IFwic3JjL2FuZ3VsYXItZ3JpZHN0ZXIubGVzc1wiXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRtaW46IHtcblx0XHRcdFx0ZmlsZXM6IHtcblx0XHRcdFx0XHRcImRpc3QvYW5ndWxhci1ncmlkc3Rlci5jc3NcIjogXCJzcmMvYW5ndWxhci1ncmlkc3Rlci5sZXNzXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cHJvdHJhY3Rvcjoge1xuXHRcdFx0ZTJlOiB7XG5cdFx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0XHRjb25maWdGaWxlOiBcInB0b3IuY29uZi5qc1wiLFxuXHRcdFx0XHRcdGFyZ3M6IHt9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHVnbGlmeToge1xuXHRcdFx0ZGlzdDoge1xuXHRcdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdFx0YmFubmVyOiBbJy8qJyxcblx0XHRcdFx0XHRcdCcgKiA8JT0gcGtnLm5hbWUgJT4nLFxuXHRcdFx0XHRcdFx0JyAqIDwlPSBwa2cuaG9tZXBhZ2UgJT4nLFxuXHRcdFx0XHRcdFx0JyAqJyxcblx0XHRcdFx0XHRcdCcgKiBAdmVyc2lvbjogPCU9IHBrZy52ZXJzaW9uICU+Jyxcblx0XHRcdFx0XHRcdCcgKiBAbGljZW5zZTogPCU9IHBrZy5saWNlbnNlICU+Jyxcblx0XHRcdFx0XHRcdCcgKi9cXG4nXG5cdFx0XHRcdFx0XS5qb2luKCdcXG4nKVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRmaWxlczoge1xuXHRcdFx0XHRcdCdkaXN0L2FuZ3VsYXItZ3JpZHN0ZXIubWluLmpzJzogWydzcmMvYW5ndWxhci1ncmlkc3Rlci5qcyddXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdHdhdGNoOiB7XG5cdFx0XHRkZXY6IHtcblx0XHRcdFx0ZmlsZXM6IFsnR3J1bnRmaWxlLmpzJywgJ2thcm1hLmNvbmYuanMnLCAncHRvci5jb25mLmpzJywgJ3NyYy8qJywgJ3Rlc3QvKiovKi5qcyddLFxuXHRcdFx0XHR0YXNrczogWydqc2JlYXV0aWZpZXInLCAnanNoaW50JywgJ3VnbGlmeScsICdsZXNzJywgJ2thcm1hOnVuaXQ6cnVuJ10sXG5cdFx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0XHRyZWxvYWQ6IHRydWUsXG5cdFx0XHRcdFx0bGl2ZXJlbG9hZDogdHJ1ZSxcblx0XHRcdFx0XHRwb3J0OiAzNTcyOVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZTJlOiB7IC8vIHNlcGFyYXRlIGUyZSBzbyBsaXZlcmVsb2FkIGRvZXNuJ3QgaGF2ZSB0byB3YWl0IGZvciBlMmUgdGVzdHNcblx0XHRcdFx0ZmlsZXM6IFsnc3JjLyonLCAndGVzdC8qKi8qLmpzJ10sXG5cdFx0XHRcdHRhc2tzOiBbJ2pzYmVhdXRpZmllcicsICdqc2hpbnQnLCAndWdsaWZ5JywgJ3Byb3RyYWN0b3InXVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Z3J1bnQucmVnaXN0ZXJUYXNrKCdkZWZhdWx0JywgWydqc2JlYXV0aWZpZXInLCAnanNoaW50JywgJ3VnbGlmeScsICdsZXNzJ10pO1xuXG5cdGdydW50LnJlZ2lzdGVyVGFzaygnZGV2JywgWydjb25uZWN0OmRldicsICdrYXJtYTp1bml0OnN0YXJ0JywgJ3dhdGNoOmRldiddKTtcblx0Z3J1bnQucmVnaXN0ZXJUYXNrKCdlMmUnLCBbJ2Nvbm5lY3Q6Y2xpJywgJ3Byb3RyYWN0b3InLCAnd2F0Y2g6ZTJlJ10pO1xuXHRncnVudC5yZWdpc3RlclRhc2soJ3Rlc3QnLCBbJ2Nvbm5lY3Q6Y2xpJywgJ2thcm1hOnNpbmdsZVJ1bicsICdwcm90cmFjdG9yJ10pO1xuXG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
